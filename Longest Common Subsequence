//C++ code of the problem : Longest Common Subsequence
// Using Memoization(Dynamic Programming)

#include <bits/stdc++.h>
using namespace std;

int lcs(string &s1,string &s2, int m , int n,vector<vector<int>> &dp){
        if(dp[m][n]!=-1)
           return dp[m][n];
        
        if(m==0||n==0)
                dp[m][n]=0;
        else
           { if(s1[m-1]==s2[n-1])
                dp[m][n]=1+lcs(s1,s2,m-1,n-1,dp);
            else
                dp[m][n]=max(lcs(s1,s2,m,n-1,dp),lcs(s1,s2,m-1,n,dp));}
            
      
        return dp[m][n];
    }

int main() {

string s1,s2;
cin>>s1>>s2;

int m=s1.length(),n=s2.length();
vector<vector<int>> dp(m+1 , vector<int> (n+1, -1)); //creating the dp table
 

cout<<lcs(s1,s2,m,n,dp);

  return 0;
}
